httr::http_type(respo)
github_api <- function(path) {
url <- httr::modify_url("https://kobo.humanitarianresponse.info/api/v2", path = path)
resp <- httr::GET(url)
if (httr::http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
}
kobo_api("/assets")
kobo_api <- function(path,
auth_type = c("client", "token"),
auth_key = NULL,
api = c("humanitarian_response", "kobotoolbox")) {
output_format <- rlang::arg_match(output_format)
assert_strings(asset_id)
auth_type <- rlang::arg_match(auth_type)
assert_api(api)
api_url <- get_api_url(api)
url <- httr::modify_url(api_url, path = path)
resp <- httr::GET(url)
if (httr::http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
structure(
list(
content = parsed,
path = path,
response = resp
),
class = "kobo_api"
)
}
kobo_api("assets")
kobo_api("/assets")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
kobo_api("/assets")
devtools::load_all(".")
kobo_api("/assets")
devtools::load_all(".")
kobo_api("/assets")
devtools::load_all(".")
kobo_api("/assets")
debugonce(kobo_api)
kobo_api("/assets")
path
auth_type
auth_key
api
assert_api(api)
debugonce(assert_api)
assert_api(api)
convenience_api_names
api
api
api <- rlang::arg_match(api)
assert_api
api
assert_api(api)
api_url <- get_api_url(api)
api_url
devtools::load_all(".")
kobo_api("/assets")
devtools::load_all(".")
kobo_api("/assets")
debugonce(kobo_api)
kobo_api("/assets")
devtools::load_all(".")
devtools::load_all(".")
kobo_api("/assets")
debugonce(kobo_api)
kobo_api("/assets")
devtools::load_all(".")
devtools::load_all(".")
kobo_api("/assets")
debugonce(get_api_url)
kobo_api("/assets")
warning(sprintf(
"`api` has length > 1. The first element will be used: ",
api),
.call = FALSE
)
?warning
devtools::load_all(".")
?warning
kobo_api("/assets")
debugonce(kobo_api)
kobo_api("/assets")
api_url
auth_type
auth_key
path
url <- httr::modify_url(api_url, path = path)
url
resp <- httr::GET(url, authenticate_api(auth_type, auth_key, api))
auth_type
auth_key
api
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
kobo_api("/assets")
a <- kobo_api("/assets")
a
a
a$content
View(a)
a[["content"]][["results"]][[1]]
kobo_api <- function(path,
auth_type = c("client", "token"),
auth_key = NULL,
api = c("humanitarian_response", "kobotoolbox")) {
assert_strings(path)
auth_type <- rlang::arg_match(auth_type)
api <- assert_api(api)
api_url <- get_api_url(api)
url <- httr::modify_url(api_url, path = path)
resp <- httr::GET(url, authenticate_api(auth_type, auth_key, api))
if (httr::http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(httr::content(resp, "text"), simplifyVector = FALSE)
structure(
list(
content = parsed,
path = path,
response = resp
),
class = "kobo_api"
)
}
print.kobo_api <- function(x, ...) {
cat("<kobo_api ", x$path, ">\n", sep = "")
str(x$content)
invisible(x)
}
kobo_api("/assets")
ua <- httr::user_agent("http://github.com/elliottmess/koboAPI")
ua
resp <- httr::GET(url, authenticate_api(auth_type, auth_key, api), ua)
devtools::load_all(".")
devtools::load_all(".")
resp <- httr::GET(url, authenticate_api(auth_type, auth_key, api), ua)
kobo_api("/assets")
devtools::load_all(".")
kobo_api("/")
devtools::load_all(".")
kobo_api("/fklfk")
devtools::load_all(".")
kobo_api("/fklfk")
kobo_api("/assets")
devtools::load_all(".")
kobo_api("/assets")
?httr::GET
devtools::load_all(".")
get_form("aSAvYreNzVEkrWg5Gdcvg")
devtools::load_all(".")
get_form("aSAvYreNzVEkrWg5Gdcvg")
devtools::load_all(".")
devtools::load_all(".")
get_form("aSAvYreNzVEkrWg5Gdcvg")
devtools::load_all(".")
get_form("aSAvYreNzVEkrWg5Gdcvg")
debugonce(get_form)
get_form("aSAvYreNzVEkrWg5Gdcvg")
api
devtools::load_all(".")
get_form("aSAvYreNzVEkrWg5Gdcvg")
debugonce(kobo_api)
get_form("aSAvYreNzVEkrWg5Gdcvg")
api
api_url <- get_api_url(api)
api_url
resp
?jsonlite::fromJSON
devtools::load_all(".")
devtools::load_all(".")
get_form("aSAvYreNzVEkrWg5Gdcvg")
debugonce(kobo_api)
get_form("aSAvYreNzVEkrWg5Gdcvg")
api
parsed <- jsonlite::fromJSON(httr::content(resp, "text"), simplifyVector = FALSE, encoding = "UTF-8")
?httr::content
parsed <- jsonlite::fromJSON(httr::content(resp, "text", encoding = "UTF-8"), simplifyVector = FALSE)
httr::http_error(resp)
View(parsed)
url
path
devtools::load_all(".")
get_form("aSAvYreNzVEkrWg5Gdcvg")
debugonce(kobo_api)
get_form("aSAvYreNzVEkrWg5Gdcvg")
path
url
resp <- httr::GET(url, authenticate_api(auth_type, auth_key, api),
ua,
httr::add_headers(Accept = "application/json"))
View(resp)
httr::status_code(resp)
parsed$message
parsed <- jsonlite::fromJSON(httr::content(resp, "text", encoding = "UTF-8"), simplifyVector = FALSE)
parsed
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE
if (httr::http_error(resp)) {
stop(
sprintf(
"kobo API request failed [%s]\n%s\n<%s>",
httr::status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
structure(
list(
content = parsed,
path = path,
response = resp
),
class = "kobo_api"
)
}
print.kobo_api <- function(x, ...) {
cat("<kobo_api ", x$path, ">\n", sep = "")
str(x$content)
invisible(x)
}
devtools::load_all(".")
devtools::load_all(".")
get_form("aSAvYreNzVEkrWg5Gdcvg")
devtools::load_all(".")
get_form("aSAvYreNzVEkrWg5Gdcvg")
parsed
jsonlite::fromJSON(httr::content(resp, "text"), simplifyVector = FALSE)
debugonce(kobo_api)
get_form("aSAvYreNzVEkrWg5Gdcvg")
parsed
resp$url
parsed
parsed
if (httr::http_error(resp)) {
stop(
sprintf(
"kobo API request failed [%s]\n%s\n<%s>",
httr::status_code(resp),
parsed$detail
),
call. = FALSE
)
}
devtools::load_all(".")
get_form("aSAvYreNzVEkrWg5Gdcvg")
devtools::load_all(".")
get_form("aSAvYreNzVEkrWg5Gdcvg")
url
resp
debugonce(kobo_api)
get_form("aSAvYreNzVEkrWg5Gdcvg")
resp
parsed
resp <- httr::GET(url, authenticate_api(auth_type, auth_key, api),
httr::add_headers(Accept = "application/json"))
parsed <- jsonlite::fromJSON(httr::content(resp, "text"), simplifyVector = FALSE)
parsed
url
api_url
url <- httr::modify_url(api_url, path = path)
url
api_url
?modify_url
url <- httr::modify_url(url = api_url, path = path)
uirl
url
api_url
path
api_url
httr::modify_url(api_url, path = path)
api_url
path
url <- paste0(url = api_url, path = path)
resp <- httr::GET(url, authenticate_api(auth_type, auth_key, api),
httr::add_headers(Accept = "application/json"))
devtools::load_all(".")
get_form("aSAvYreNzVEkrWg5Gdcvg")
devtools::load_all(".")
get_form("aSAvYreNzVEkrWg5Gdcvg")
debugonce(kobo_api )
get_form("aSAvYreNzVEkrWg5Gdcvg")
url
resp <- httr::GET(url, authenticate_api(auth_type, auth_key, api),
httr::add_headers(Accept = "application/json"))
parsed
resp
url
url <- "https://kobo.humanitarianresponse.info/api/v2/assets/aSAvYreNzVEkrWg5Gdcvg"
resp <- httr::GET(url, authenticate_api(auth_type, auth_key, api),
httr::add_headers(Accept = "application/json"))
resp
url
get_form("a9teUa9FGbfYa6Uk4hQ3Ej")
debugonce(kopo_api)
devtools::load_all(".")
debugonce(kopo_api)
debugonce(kobo_api)
get_form("a9teUa9FGbfYa6Uk4hQ3Ej")
View(parsed)
debugonce(get_form)
get_form("a9teUa9FGbfYa6Uk4hQ3Ej")
languages
cols_with_multi_languages
survey <- as.data.frame(form_raw$content$survey) %>%
tidyr::unnest_wider(dplyr::any_of(cols_with_multi_languages), names_sep = "_") %>%
dplyr::rename(dplyr::any_of(languages_labels))
survey
survey <- as.data.frame(form_raw$content$survey)
survey
devtools::load_all(".")
get_form("a9teUa9FGbfYa6Uk4hQ3Ej")
debugonce(get_form)
get_form("a9teUa9FGbfYa6Uk4hQ3Ej")
form_raw
form_raw_content <- form_raw$content
form_raw_content
languages <-(form_raw_content$content$translations)
function(asset_id,
auth_type = c("client", "token"),
auth_key = NULL,
api = c("humanitarian_response", "kobotoolbox")) {
assert_strings(asset_id)
auth_type <- rlang::arg_match(auth_type)
form_path <- paste0("/assets/", asset_id, "/")
form_raw <- kobo_api(form_path,
auth_type = auth_type,
auth_key = auth_key,
api = api)
languages <-(form_raw$content$content$translations)
cols_with_multi_languages <- form_raw$content$content$translated
languages_labels <- purrr::map(cols_with_multi_languages, ~paste0(.x, "_", rep(1:length(languages)))) %>%
unlist()
names(languages_labels) <-  purrr::map(cols_with_multi_languages, ~paste0(.x, "::", languages)) %>%
unlist()
survey <- as.data.frame(form_raw$content$content$survey) %>%
tidyr::unnest_wider(dplyr::any_of(cols_with_multi_languages), names_sep = "_") %>%
dplyr::rename(dplyr::any_of(languages_labels))
choices <- as.data.frame(form_raw$content$content$choices) %>%
tidyr::unnest_wider(dplyr::any_of(cols_with_multi_languages), names_sep = "_") %>%
dplyr::rename(dplyr::any_of(languages_labels))
settings <- data.frame(form_title = form_raw[["name"]],
form_id = form_raw[["uid"]],
version = form_raw[["version_id"]],
default_language =form_raw[["summary"]][["default_translation"]])
form <- list("survey" = survey, "choices" = choices, "settings" = settings)
return(form)
}
languages
languages <- unlist (form_raw_content$content$translations)
languages
cols_with_multi_languages <- form_raw_content$translated
languages
languages_labels <- purrr::map(cols_with_multi_languages, ~paste0(.x, "_", rep(1:length(languages)))) %>%
unlist()
languages_labels
cols_with_multi_languages
form_raw_content$content$translated
cols_with_multi_languages <- unlist(form_raw_content$content$translated)
languages_labels <- purrr::map(cols_with_multi_languages, ~paste0(.x, "_", rep(1:length(languages)))) %>%
unlist()
languages_labels
names(languages_labels) <-  purrr::map(cols_with_multi_languages, ~paste0(.x, "::", languages)) %>%
unlist()
languages_labels
survey <- as.data.frame(form_raw$content$content$survey) %>%
tidyr::unnest_wider(dplyr::any_of(cols_with_multi_languages), names_sep = "_") %>%
dplyr::rename(dplyr::any_of(languages_labels))
survey
as.data.frame(form_raw$content$content$survey)
survey <- as.data.frame(form_raw$content$content$survey)
View(survey)
form_raw$content$content$survey
survey <- tibble::tibble(form_raw_content$survey)
survey
survey <- tibble::tibble(form_raw$content$content$survey)
survey
dplyr::bind_cols(survey)
dplyr::bind_rows(survey)
survey
View(survey)
survey <- dplyr::bind_rows(form_raw$content$content$survey)
survey
View(survey)
survey$label
survey <- dplyr::bind_rows(form_raw$content$content$survey) %>%
tidyr::unnest_wider(dplyr::any_of(cols_with_multi_languages), names_sep = "_")
survey
devtools::load_all(".")
devtools::load_all(".")
get_form("a9teUa9FGbfYa6Uk4hQ3Ej")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
get_form("a9teUa9FGbfYa6Uk4hQ3Ej")
devtools::load_all(".")
devtools::load_all(".")
get_form("a9teUa9FGbfYa6Uk4hQ3Ej")
devtools::load_all(".")
devtools::load_all(".")
get_form("a9teUa9FGbfYa6Uk4hQ3Ej")
devtools::load_all(".")
get_form("a9teUa9FGbfYa6Uk4hQ3Ej")
devtools::load_all(".")
get_form("a9teUa9FGbfYa6Uk4hQ3Ej")
devtools::load_all(".")
get_form("a9teUa9FGbfYa6Uk4hQ3Ej")
get_form("a9teUa9FGbfYa6Uk4hQ3Ej")
devtools::load_all(".")
devtools::load_all(".")
get_form("a9teUa9FGbfYa6Uk4hQ3Ej")
devtools::load_all(".")
get_asset_id_list()
debugonce(get_asset_id_list)
get_asset_id_list()
devtools::load_all(".")
get_asset_id_list()
debugonce(get_asset_id_list)
get_asset_id_list()
assets_raw$content$results
assets_raw_results
assets_raw_results <- dplyr::bind_rows(assets_raw[["content"]][["results"]]
)
str(assets_raw$content)
names(assets_raw$content)
names(assets_raw$content$results)
View(assets_raw$content$results)
assets_raw_results <- purrr::map_chr(assets_raw[["content"]][["results"]], .x[["uid"]])
?purrr::map_chr
purrr::map_chr(assets_raw[["content"]][["results"]],  "uid")
purrr::map2_chr(assets_raw$content$results, c("uid", "name", "asset_type", "has_deployment")) %>%
dplyr::bind_rows()
purrr::map2_chr(assets_raw$content$results, c("uid", "name", "asset_type", "has_deployment"), ~.x[[.y]]) %>%
dplyr::bind_rows()
purrr::map_chr(assets_raw$content$results,`[`, c("uid", "name", "asset_type", "has_deployment")
dplyr::bind_rows()
data.frame(asset_id = purrr::map_chr(assets_raw[["content"]][["results"]],  "uid"),
asset_name = assets_raw[["results"]][["name"]],
asset_type = assets_raw[["results"]][["asset_type"]],
has_deployment = assets_raw[["results"]][["has_deployment"]])
}
purrr::map_chr(assets_raw$content$results,`[`, c("uid", "name", "asset_type", "has_deployment"))
purrr::map(assets_raw$content$results,`[`, c("uid", "name", "asset_type", "has_deployment")) %>%
dplyr::bind_rows()
devtools::load_all(".")
get_asset_id_df()
devtools::load_all(".")
get_data("a9teUa9FGbfYa6Uk4hQ3Ej")
devtools::load_all(".")
get_data("a9teUa9FGbfYa6Uk4hQ3Ej")
get_data("a9teUa9FGbfYa6Uk4hQ3Ej") %>% View
View(.[[1]][[1]])
debugonce(get_data)
get_data("a9teUa9FGbfYa6Uk4hQ3Ej") %>% View
View(asset_data_raw)
devtools::load_all(".")
get_data("a9teUa9FGbfYa6Uk4hQ3Ej") %>% View
get_data("a9teUa9FGbfYa6Uk4hQ3Ej")
debugonce(get_data)
get_data("a9teUa9FGbfYa6Uk4hQ3Ej")
asset_data_raw$content$results %>% dplyr::bind_rows()
class(asset_data_raw$content$results)
class(asset_data_raw$content$results[[1]])
purrr::map_dfr(asset_data_raw$content$results)
purrr::map_df(asset_data_raw$content$results, tibble::as_tibble)
asset_data_raw$content$results %>%
purrr::map(tibble::as_tibble) %>%
purrr::reduce(dplyr::bind_rows)
asset_data_raw$content$results[[1]]$_submitted_by
asset_data_raw$content$results[[1]]$´_submitted_by
get_data("a9teUa9FGbfYa6Uk4hQ3Ej")
devtools::load_all(".")
debugonce(get_data)
get_data("a9teUa9FGbfYa6Uk4hQ3Ej")
asset_data_raw$content$results[[1]]$´_submitted_by´
View(asset_data_raw$content$results)
asset_data_raw$content$results[[1]][["_submitted_by"]]
?magrittr::extract
iris %>%
extract(, 1:4) %>%
head
devtools::load_all(".")
get_data("a9teUa9FGbfYa6Uk4hQ3Ej")
devtools::load_all(".")
get_data("a9teUa9FGbfYa6Uk4hQ3Ej")
get_data("a9teUa9FGbfYa6Uk4hQ3Ej") %>% View()
devtools::load_all(".")
get_data("a9teUa9FGbfYa6Uk4hQ3Ej") %>% View()
devtools::load_all(".")
get_data("a9teUa9FGbfYa6Uk4hQ3Ej")
pak::pak("ruODK")
options(repos = c(ropensci = 'https://ropensci.r-universe.dev',
CRAN = 'https://cloud.r-project.org'))
install.packages('ruODK')
ruODK::ru_setup(
svc = "https://sandbox.central.getodk.org/v1/projects/14/forms/build_Flora-Quadrat-0-4_1564384341.svc",
un = Sys.getenv("ODKC_TEST_UN"),
pw = Sys.getenv("ODKC_TEST_PW"),
tz = "Australia/Perth",
verbose = TRUE
)
options(repos = c(ropensci = 'https://ropensci.r-universe.dev'))
